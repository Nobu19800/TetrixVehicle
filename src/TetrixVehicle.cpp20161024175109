// -*- C++ -*-
/*!
 * @file  TetrixVehicle.cpp
 * @brief Tetrix Vehicle
 * @date $Date$
 *
 * @author 宮本　信彦　n-miyamoto@aist.go.jp
 * 産業技術総合研究所　ロボットイノベーション研究センター
 * ロボットソフトウエアプラットフォーム研究チーム
 *
 * $Id$
 */

#include "TetrixVehicle.h"

// Module specification
// <rtc-template block="module_spec">
static const char* tetrixvehicle_spec[] =
  {
    "implementation_id", "TetrixVehicle",
    "type_name",         "TetrixVehicle",
    "description",       "Tetrix Vehicle",
    "version",           "1.0.0",
    "vendor",            "AIST",
    "category",          "Controller",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
    // Configuration variables
    "conf.default.wheelRadius", "0.04",
    "conf.default.wheelDistance", "0.17",
    "conf.default.portNum", "1",

    // Widget
    "conf.__widget__.wheelRadius", "text",
    "conf.__widget__.wheelDistance", "text",
    "conf.__widget__.portNum", "radio",
    // Constraints
    "conf.__constraints__.portNum", "(1,2,3,4)",

    "conf.__type__.wheelRadius", "double",
    "conf.__type__.wheelDistance", "double",
    "conf.__type__.portNum", "int",

    ""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
TetrixVehicle::TetrixVehicle(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager),
    m_target_velocityIn("target_velocity", m_target_velocity),
    m_positionOut("position", m_position)

    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
TetrixVehicle::~TetrixVehicle()
{
}



RTC::ReturnCode_t TetrixVehicle::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers
  addInPort("target_velocity", m_target_velocityIn);
  
  // Set OutPort buffer
  addOutPort("position", m_positionOut);
  
  // Set service provider to Ports
  
  // Set service consumers to Ports
  
  // Set CORBA Service Ports
  
  // </rtc-template>

  // <rtc-template block="bind_config">
  // Bind variables and configuration variable
  bindParameter("wheelRadius", m_wheelRadius, "0.04");
  bindParameter("wheelDistance", m_wheelDistance, "0.17");
  bindParameter("portNum", m_portNum, "1");
  // </rtc-template>
  
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onFinalize()
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onStartup(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onShutdown(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onActivated(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onDeactivated(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onExecute(RTC::UniqueId ec_id)
{
	if(m_target_velocityIn.isNew())
	{
		m_target_velocityIn.read();
		double vx = m_target_velocity.data.vx;
		double vy = m_target_velocity.data.vy;
		double va = m_target_velocity.data.va;
	}
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onAborting(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onError(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onReset(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onStateUpdate(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t TetrixVehicle::onRateChanged(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}



extern "C"
{
 
  void TetrixVehicleInit(RTC::Manager* manager)
  {
    coil::Properties profile(tetrixvehicle_spec);
    manager->registerFactory(profile,
                             RTC::Create<TetrixVehicle>,
                             RTC::Delete<TetrixVehicle>);
  }
  
};


